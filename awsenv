#!/usr/bin/env python3
import argparse
import os
import sys

from botocore.configloader import raw_config_parse
from botocore.session import Session
from botocore.exceptions import ClientError, InvalidConfigError
from botocore.exceptions import SSOTokenLoadError, UnauthorizedSSOTokenError


def get_profiles():
    return Session().available_profiles


def get_credentials(profile):
    AWS_CONF = '~/.aws/config'
    AWS_VARS = ['AWS_ACCESS_KEY_ID',
                'AWS_SECRET_ACCESS_KEY',
                'AWS_SESSION_TOKEN']

    try:
        session = Session(profile=profile)
        credentials = session.get_credentials().get_frozen_credentials()
    except (SSOTokenLoadError, UnauthorizedSSOTokenError):
        try:
            os.system(f'aws --profile {profile} sso login')
            return get_credentials(profile)
        except Exception as e:
            raise SystemExit(f'aws sso login failed with: {e.__class__.__name__}: {e}')
    except Exception as e:
        raise SystemExit(f'get_credentials failed with {e.__class__.__name__}: {e}')
    else:
        return list(zip(AWS_VARS, [(c or '') for c in credentials]))


def exec_sh(profile, cmd, creds):
    NAME = os.path.basename(__file__)
    GREEN = '\[$(tput setaf 2)\]'
    RESET = '\[$(tput sgr0)\]'
    os.environ['PS1'] = f'[\\u@{GREEN}{NAME}/{profile}{RESET} \\W]\\$ '

    for k, v in creds:
        os.environ[k] = str(v)

    try:
        os.execvp(cmd[0], cmd)
    except OSError as e:
        raise SystemExit(f"error executing '{args.command[0]}': {os.strerror(e.errno)}")


def process_args():
    ap = argparse.ArgumentParser(
        prog='awsenv',
        description='run a command using a configured AWS profile',
        usage='%(prog)s <profile> [--] [<command>]'
    )

    ap.add_argument('profile', choices=get_profiles(),
                        help='the AWS profile to use')
    ap.add_argument('command', nargs=argparse.REMAINDER,
                        help='the command to execute')

    return ap.parse_args()


def main():
    args = process_args()
    creds = get_credentials(args.profile)

    if args.command:
        exec_sh(args.profile, args.command, creds)
    else:
        for k, v in creds:
            print(f'export {k}="{v}"')


main()
